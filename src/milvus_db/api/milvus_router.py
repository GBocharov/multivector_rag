import io
from typing import List

import PIL.Image
from fastapi import APIRouter, UploadFile
from fastapi.responses import FileResponse

import milvus_db.domain.processor as pr
from document_utils.doc_parsers import bytes_to_images
from milvus_db.domain.schema import InsertImages, SearchRequest

milvus_router = APIRouter(
    prefix="/milvus_router",
    tags=["milvus"],
)

save_dir = r'/opt/app-root/temp_data/image_data'


@milvus_router.get(
    "/db_info",
)
async def get_db_info(
):
    res =  await pr.get_db_info()
    return res


@milvus_router.get(
    "/get_collection_info",
    response_model_exclude_none=True,
)
async def get_collection_info(
collection_name:str = 'test'
):
    res =  await pr.get_collection_info(collection_name)

    return res

@milvus_router.get(
    "/clear_collection"
)
async def clear_collection(
collection_name:str = 'test'
):

    return await pr.drop_collection(collection_name)




@milvus_router.post(
    "/insert_image",# Set what the media type will be in the autogenerated OpenAPI specification.
    # fastapi.tiangolo.com/advanced/additional-responses/#additional-media-types-for-the-main-response
)
async def insert_images(
files: List[UploadFile],
collection_name: str = 'test'
):
    images = [PIL.Image.open(io.BytesIO(await im.read())) for im in files]

    insert_request = InsertImages(
        images=images,
        collection_name=collection_name
    )

    result = await pr.insert_Images(insert_request)

    return result

@milvus_router.post(
    "/insert_pdf",
)
async def insert_pdf(
    file: UploadFile,
    collection_name: str = 'test'
):
    request_object_content = await file.read()
    images = bytes_to_images(request_object_content)

    insert_request = InsertImages(
        images=images,
        collection_name=collection_name,
        origin_file_name=file.filename
    )

    result = await pr.insert_Images(insert_request)
    return result

@milvus_router.post(
    "/text_search"
)
async def text_search(
    request: SearchRequest
):
    results = await pr.search_Texts(request)
    if not results:
        return 'empty collection has been provided'
    print(results)
    return FileResponse(results[0][0][2])